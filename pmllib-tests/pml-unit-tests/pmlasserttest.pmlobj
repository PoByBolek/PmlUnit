define object PmlAssertTest
endobject


define method .testEqual(!assert is PmlAssert)

    !assert.equal(0, 3 * 0)
    !assert.equal(1 + 1, 2)
    !assert.equal(2, object Real('2'))
    !assert.equal(3, 4 - 1)

    !assert.equal('', '')
    !assert.equal('equal', 'equal')
    !assert.equal(object String(), object String())

    !assert.equal(true, true)
    !assert.equal(false, false)
    !assert.equal(object Boolean(), object Boolean())

    !assert.equal(object Array(), object Array())
    !assert.equal(object DateTime(2018, 7, 28), object DateTime(2018, 7, 28))
    !assert.equal(object Direction('N WRT /*'), object Direction('N WRT /*'))
    !assert.equal(object Orientation('Y is N and Z is U WRT /*'), object Orientation('X is E and Y is N WRT /*'))
    !assert.equal(object Position('E 0 N 0 U 0 WRT /*'), object Position('W 0 S 0 D 0 WRT /*'))

    !world = /*
    !assert.equal(object DbRef('/*'), !world)
    !assert.equal(object DbRef(), NULREF)
    !assert.equal(NULREF, NULREF)

endmethod


define method .testEqualWithUnequalValues(!assert is PmlAssert)

    !assert.equal(0, 1)
    handle (196,1)
    elsehandle NONE
        !assert.fail('Comparing unequal numbers should fail')
    endhandle

    !assert.equal('left', 'right')
    handle (196,1)
    elsehandle NONE
        !assert.fail('Comparing unequal strings should fail')
    endhandle

    !assert.equal(true, false)
    handle (196,1)
    elsehandle NONE
        !assert.fail('Comparing unequal booleans should fail')
    endhandle

    !assert.equal(object DateTime(2018, 7, 28, 19, 50), object DateTime(2018, 7, 28, 19, 55))
    handle (196,1)
    elsehandle NONE
        !assert.fail('Comparing unequal dates should fail')
    endhandle

endmethod


define method .testEqualWithUnsupportedTypes(!assert is PmlAssert)

    !assert.equal(0, '0')
    handle (2,779) $* method not found; cannot compare Real to String
    elsehandle NONE
        !assert.fail('Expected error (2,779)')
    endhandle

    !assert.equal(object Real(), object String())
    handle (2,779) $* method not found; cannot compare Real to String
    elsehandle NONE
        !assert.fail('Expected error (2,779)')
    endhandle

endmethod


define method .testNotEqual(!assert is PmlAssert)

    !assert.notEqual(0, 1)
    !assert.notEqual(1, object Real())
    !assert.notEqual(object Real(), 2)

    !assert.notEqual('left', 'right')
    !assert.notEqual('', object String())
    !assert.notEqual(object String(), '')

endmethod


define method .testNotEqualWithEqualValues(!assert is PmlAssert)

    !assert.notEqual(0, 0)
    handle (196,1)
    elsehandle NONE
        !assert.fail('Comparing equal numbers should fail')
    endhandle

    !assert.notEqual('left', 'left')
    handle (196,1)
    elsehandle NONE
        !assert.fail('Comparing equal strings should fail')
    endhandle

    !assert.notEqual(true, true)
    handle (196,1)
    elsehandle NONE
        !assert.fail('Comparing equal booleans should fail')
    endhandle

    !assert.notEqual(object DateTime(2018, 7, 28, 19, 50), object DateTime(2018, 7, 28, 19, 50))
    handle (196,1)
    elsehandle NONE
        !assert.fail('Comparing equal dates should fail')
    endhandle

endmethod


define method .testNotEqualWithUnsupportedTypes(!assert is PmlAssert)

    -- Although the number zero and the string '0' are definitely not equal
    -- this should still raise a (2,779) to reveal potential bugs in test code.

    !assert.notEqual(0, '0')
    handle (2,779) $* method not found; cannot compare Real to String
    elsehandle NONE
        !assert.fail('Expected error (2,779)')
    endhandle

    !assert.notEqual(object Real(), object String())
    handle (2,779) $* method not found; cannot compare Real to String
    elsehandle NONE
        !assert.fail('Expected error (2,779)')
    endhandle

endmethod


define method .testLessThan(!assert is PmlAssert)

    !assert.lessThan(3, 4)
    !assert.lessThan(1.2, 3.4)

    !assert.lessThan(3, 3)
    handle (196,1)
    elsehandle NONE
        !assert.fail('3 should not be less than 3')
    endhandle

    !assert.lessThan(4, 3)
    handle (196,1)
    elsehandle NONE
        !assert.fail('4 should not be less than 3')
    endhandle

    !assert.lessThan(4, '5')
    handle (2,779) $* method not found; cannot copare Real to String
    elsehandle NONE
        !assert.fail('4 should not be less than |5|')
    endhandle

endmethod


define method .testLessThanOrEqual(!assert is PmlAssert)

    !assert.lessThanOrEqual(3, 3)
    !assert.lessThanOrEqual(3, 4)
    !assert.lessThanOrEqual(1.2, 1.2)
    !assert.lessThanOrEqual(1.2, 3.4)

    !assert.lessThanOrEqual(4, 3)
    handle (196,1)
    elsehandle NONE
        !assert.fail('4 should not be less than or equal to 3')
    endhandle

    !assert.lessThanOrEqual(4, '5')
    handle (2,779) $* method not found; cannot copare Real to String
    elsehandle NONE
        !assert.fail('4 should not be less than or equal to |5|')
    endhandle

endmethod


define method .testGreaterThanOrEqual(!assert is PmlAssert)

    !assert.greaterThanOrEqual(3, 3)
    !assert.greaterThanOrEqual(4, 3)
    !assert.greaterThanOrEqual(2.1, 2.1)
    !assert.greaterThanOrEqual(4.3, 2.1)

    !assert.greaterThanOrEqual(3, 4)
    handle (196,1)
    elsehandle NONE
        !assert.fail('3 should not be greater than or equal to 4')
    endhandle

    !assert.lessThan(4, '3')
    handle (2,779) $* method not found; cannot copare Real to String
    elsehandle NONE
        !assert.fail('4 should not be greater than |3|')
    endhandle

endmethod


define method .testGreaterThan(!assert is PmlAssert)

    !assert.greaterThan(4, 3)
    !assert.greaterThan(4.3, 2.1)

    !assert.greaterThan(3, 3)
    handle (196,1)
    elsehandle NONE
        !assert.fail('3 should not be greater than 3')
    endhandle

    !assert.greaterThan(3, 4)
    handle (196,1)
    elsehandle NONE
        !assert.fail('3 should not be greater than 4')
    endhandle

    !assert.lessThan(4, '3')
    handle (2,779) $* method not found; cannot copare Real to String
    elsehandle NONE
        !assert.fail('4 should not be greater than |3|')
    endhandle

endmethod


define method .testIsSet(!assert is PmlAssert)

    !assert.isSet(3)
    !assert.isSet('')
    !assert.isSet(true)
    !assert.isSet(false)
    !assert.isSet(object DateTime())
    !assert.isSet(object Position('E 0 N 0 U 0 WRT /*'))
    !assert.isSet(object Direction('N WRT /*'))
    !assert.isSet(object Orientation('Y is N and Z is U WRT /*'))
    !assert.isSet(object DbRef('/*'))

endmethod


define method .testIsUnset(!assert is PmlAssert)

    !assert.isUnset(object Real())
    !assert.isUnset(object String())
    !assert.isUnset(object Boolean())
    !assert.isUnset(object Position())
    !assert.isUnset(object Direction())
    !assert.isUnset(object Orientation())
    !assert.isUnset(object DbRef())
    !assert.isUnset(NULREF)
    !assert.isUnset(!assert)

endmethod


define method .testIsTrue(!assert is PmlAssert)

    !assert.isTrue(true)
    !assert.isTrue(not false)
    !assert.isTrue(object Boolean('true'))
    !x = 2
    !assert.isTrue(!x lt 3)

    !assert.isTrue(false)
    handle (196,1)
    elsehandle NONE
        !assert.fail('false should not be true')
    endhandle

    !assert.isTrue(object Boolean())
    handle (196,1)
    elsehandle NONE
        !assert.fail('Boolean() should not be true')
    endhandle

    !assert.isTrue('true')
    handle (2,779) $* method not found
    elsehandle NONE
        !assert.fail('Should not be able to assert truth for strings.')
    endhandle

endmethod


define method .testIsFalse(!assert is PmlAssert)

    !assert.isFalse(false)
    !assert.isFalse(not true)
    !assert.isFalse(object Boolean('false'))
    !x = 'something'
    !assert.isFalse(!x.upCase() eq 'ELSE')

    !assert.isFalse(true)
    handle (196,1)
    elsehandle NONE
        !assert.fail('false should not be true')
    endhandle

    !assert.isFalse(object Boolean())
    handle (196,1)
    elsehandle NONE
        !assert.fail('Boolean() should not be false')
    endhandle

    !assert.isFalse('true')
    handle (2,779) $* method not found
    elsehandle NONE
        !assert.fail('Should not be able to assert falseness for strings.')
    endhandle

endmethod


define method .testFail(!assert is PmlAssert)

    !assert.fail()
    handle (196,1)
    endhandle

endmethod


define method .testInstanceOf(!assert is PmlAssert)

    !assert.instanceOf(3, 'REAL')
    !assert.instanceOf('', 'STRING')
    !assert.instanceOf(object DateTime(), 'DATETIME')
    !assert.instanceOf(object Array(), 'ARRAY')
    !assert.instanceOf(NULREF, 'DBREF')
    !assert.instanceOf(!assert, 'PMLASSERT')

    !assert.instanceOf(3, 'STRING')
    handle (196,1)
    elsehandle NONE
        !assert.fail('3 should not be of type <STRING>')
    endhandle

endmethod
